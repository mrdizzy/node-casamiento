{
  "name": "express-view-cache",
  "version": "0.0.6",
  "description": "Unobtrusive solution to express framework - cache rendered page on server side, without unnecessary database requests and rendering.",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/vows --spec tests/*"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:vodolaz095/express-view-cache.git"
  },
  "bugs": {
    "url": "https://github.com/vodolaz095/express-view-cache/issues"
  },
  "author": {
    "name": "Anatolij Ostroumov",
    "email": "Ostroumov095@gmail.com",
    "url": "http://www.teksi.ru/resume"
  },
  "dependencies": {
    "memjs": "*",
    "redis": "*",
    "hiredis": "*"
  },
  "optionalDependencies": {
    "hiredis": "*"
  },
  "devDependencies": {
    "vows": "*"
  },
  "keywords": [
    "express",
    "view",
    "cache",
    "memcached",
    "redis",
    "caching",
    "memory"
  ],
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "express-view-cache\n==================\n\nUnobtrusive solution to express framework - cache response content, without database requests and page rendering.\n\nWhy do we need this plugin and how do it works?\n==================\n\nLet's consider we have a NodeJS application with code like this:\n\n    app.get('/getPopularPosts',function(req,res){\n        req.model.posts.getPopular(function(err,posts){\n            if(err) throw err;\n            res.render('posts',{\"posts\":posts});\n        });\n    });\n\nThe method `getPopular` of `posts` requires a call to database and executed slowly. Also rendeding the template of posts\nrequires some time. So, maybe we need to cache all this? Ideally, when visitor gets the page with url  `/getPopularPosts`\nwe have to give him info right from cache, without requests to database, parsing data recieved, rendering page and other things\nwe need to do to give him this page. The most expressJS way to do it is to make a separate middleware, that is runned before\nrouter middleware, and returns page from cache (if it is present in cache) or pass data to other middlewares, but this caching\nmiddleware adds a listener to response, which SAVES rendered response to cache. And for future use, the response is taken from CACHE!\n\nIt can use memory storage or (via module [memjs](https://npmjs.org/package/memjs))\nMemcache server or [memcachier.com](https://memcachier.com/) solution  as backend.\nRight now it is tested in production on heroku hosting.  Feedback is welcome!\n\n\nExample\n==================\nThere is a complete example of NodeJS + ExpressJS application which responds with current time.\n\n    var express = require('express'),\n        http = require('http'),\n        path = require('path'),\n        cachingMiddleware = require('express-view-cache');\n\n    var app = express();\n\n    app.configure(function () {\n        app.set('port', process.env.PORT || 3000);\n        app.use(express.logger('dev'));\n\n        //set up caching BEFORE router middleware - because next() is not fired when we got rendered page from cache\n        app.use(cachingMiddleware(1000,{'type':'application/json'}));\n        app.use('/cacheFor5sec',cachingMiddleware(5000,{'type':'application/json'}));\n        app.use('/cacheFor3sec',cachingMiddleware(3000,{'type':'application/json'}));\n\n        //set up router middleware for application\n        app.use(app.router);\n\n        app.use(express.errorHandler());\n\n        app.get('*', function(request,response){\n            response.json({\n                'Page Created At':new Date().toLocaleTimeString()\n            });\n        });\n    });\n\n    http.createServer(app).listen(app.get('port'), function () {\n        console.log(\"Express server listening on port \" + app.get('port'));\n    });\n\n\nOptions\n==================\n\n    app.use(cachingMiddleware(1000,{ //invalidation time, informations is stored in cache for 1000 milliseconds\n        'type':'application/json', //type of returned content\n        'driver':'memjs'//can be `memjs`,`redis`,`memory`\n    }));\n\nThe variable of `driver`  can be ommited, and the middleware will use build in memory storage.\nBe advised - the memory storage IS NOT INTENTED TO BE PRODUCTION READY! It is memleaky and not shared in cluster.\nIf the variable of `driver` equals `memjs`, the [memjs](https://npmjs.org/package/memjs) module is used for managed memcache.\nIt works from the box if you ran you app at heroku hosting with [Memcachier](https://addons.heroku.com/memcachier) addon installed.\nAlso it works with locally installed Memcached instances - see [https://devcenter.heroku.com/articles/memcachier#node-js](https://devcenter.heroku.com/articles/memcachier#node-js)\nfor details.\nIf you want to use your private `Memcache` instance, you can set the process inviroment variables like this\n\n    export MEMCACHIER_SERVERS=\"localhost:11211\"\n    export MEMCACHIER_USERNAME=\"\"\n    export MEMCACHIER_PASSWORD=\"\"\nAnd set the memcache protocol to binary, i.e. run the memcached like this\n\n    $ memcached -v -B binary\n\nIf you want to use `Redis` instance, you can set the `driver` to `redis`. If your redis server have not the default\nsettings (localhost:6379 withour password), you can set redis parameters by setting enviroment variable of `redisUrl`\nlike this:\n\n    export redisUrl=\"redis://username:veryLongAndHardPasswordBecauseRedisHashes50kPasswordsEverySecond@somehost:6378\"\n\nThe parameter of `type` is for setting response type for returned content  -\nsee [http://expressjs.com/api.html#res.type](http://expressjs.com/api.html#res.type) for details.\n\n\nTests\n==================\n\nInstall vows and test as usual\n\n    $ npm install vows\n    $ npm test\n\n[![Build Status](https://travis-ci.org/vodolaz095/express-view-cache.png)](https://travis-ci.org/vodolaz095/express-view-cache)\n\nCredits\n==================\n\n  - [Ostroumov Anatolij](https://github.com/vodolaz095)\n\nLicense\n==================\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2013 Ostroumov Anatolij [http://teksi.ru/resume/](http://teksi.ru/resume/)\n\n\n\n",
  "_id": "express-view-cache@0.0.6",
  "_from": "express-view-cache"
}
