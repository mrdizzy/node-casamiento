{"ts":1349374488693,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"process.env.NODE_ENV = \"test\";\r\nvar _ = require('underscore'),\r\n    api = require('./config/ebay_config')(),\r\n    db = require('./config/database').db,\r\n    async = require('async');\r\nImportOrders(function(err, response) {\r\n    saveOrders(err, response, function(e, r) {});\r\n});\r\n\r\nfunction ImportOrders(callback) {\r\n    async.waterfall([\r\n\r\n    function(cb) {\r\n        db.get('time', cb)\r\n    }, function(response, cb) {\r\n        api.makeRequest(\"GetOrders\", {\r\n            ModTimeFrom: response.lastModified,\r\n            ModTimeTo: new Date().toISOString(),\r\n            DetailLevel: \"ReturnAll\"\r\n        }, \"json\", null, callback);\r\n    }])\r\n}\r\n\r\nfunction saveOrders(error, ordersResponse, callback) {\r\n    var timestamp = ordersResponse.Timestamp;\r\n    if (ordersResponse.ReturnedOrderCountActual === '0') {\r\n        callback(\"No orders to import\");\r\n    }\r\n    else {\r\n        var orders = ordersResponse.OrderArray;\r\n        orders.forEach(function(order) {\r\n            order._id = order.OrderID;\r\n        })\r\n        async.waterfall([function(cb) {\r\n            db.save(orders, function(err, response) {\r\n                cb(err, response)\r\n            });\r\n        }, function(response, cb) {\r\n            var conflicts = _.map(response, function(doc) {\r\n                if (doc.error == 'conflict') {\r\n                    return doc.id;\r\n                }\r\n            })\r\n            db.get(_.compact(conflicts), function(e, r) {\r\n                r.forEach(function(doc) {\r\n                    doc.emails = \"POOO\";\r\n                });\r\n                db.save(r.toArray(), function(ee, conflicts) {\r\n                    cb(ee, conflicts)\r\n                });\r\n            })\r\n        }, function(conflicts, cb) {\r\n            var multipleLineOrders = _.map(orders, function(order) {\r\n                if (order.TransactionArray.length > 1) {\r\n                    return _.pluck(order.TransactionArray, 'OrderLineItemID');\r\n                }\r\n            });\r\n            multipleLineOrders = _.compact(multipleLineOrders);\r\n            multipleLineOrders = _.flatten(multipleLineOrders);\r\n            db.get(multipleLineOrders, cb)\r\n        },\r\n        function(duplicates, cb) {\r\n              var duplicatesFound = _.map(duplicates, function(d) {\r\n                if(d.error != \"not_found\") {\r\n                    return { _id: d.id, rev: d.value.rev }\r\n              }\r\n              });\r\n              duplicatesFound = _.compact(duplicatesFound);\r\n              async.forEach(duplicatesFound, function(duplicate, callback) {\r\n               console.log(duplicate);\r\n                   db.remove(duplicate._id, duplicate.rev, callback);\r\n              }, cb);\r\n             \r\n        },\r\n        \r\n        function(response, cb) { // Update time\r\n            db.save('time', {\r\n                lastModified: timestamp\r\n            }, cb);\r\n        }], callback);\r\n    }\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2889}]],"length":2889}
