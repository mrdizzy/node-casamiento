{"ts":1353619782124,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var paypal = require('./../config/paypal_config')(),\r\n    db = require('./../config/database').db,\r\n    async = require('async');\r\n\r\nvar currency_conversions = {};\r\n\r\n[2012, 2011].forEach(function(year) {\r\n    [\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\", \"08\",\"09\",\"10\",\"11\",\"12\"].forEach(function(month) {\r\n        var startdate = year + \"-\" + month + \"-01\" + \"T00:00:00Z\",\r\n            enddate = year + \"-\" + month + \"-14\" + \"T23:59:59Z\";\r\n        var second_startdate = year + \"-\" + month + \"-15\" + \"T00:00:00Z\",\r\n            second_enddate = year + \"-\" + month + \"-31\" + \"T23:59:59Z\";\r\n        console.log(startdate, enddate);\r\n\r\n        PayPalImport(startdate,enddate,function(err,response) {\r\n        \r\n            console.log(err,response)\r\n        })\r\n                PayPalImport(second_startdate,second_enddate,function(err,response) {\r\n        \r\n            console.log(err,response)\r\n        })\r\n    })\r\n})\r\n\r\nmodule.exports = PayPalImport;\r\n\r\nfunction PayPalImport(startdate, enddate, callback) {\r\n    paypal.buildQuery(\"TransactionSearch\", function(error, response) {\r\n        if (error) {\r\n            callback(error);\r\n        }\r\n        else {\r\n            parseTransactions(response, callback);\r\n        }\r\n    }, {\r\n        startdate: startdate,\r\n        enddate: enddate,\r\n        transactionclass: \"BalanceAffecting\"\r\n    })\r\n}\r\n\r\nfunction parseTransactions(res, callback) {\r\n\r\n    var transactions = res.TransactionSearchResponse;\r\n\r\n    transactions.forEach(function(t) {\r\n        t._id = t.L_TRANSACTIONID;\r\n        filter(t);\r\n        //gatherCurrencyConversions(t);\r\n    })\r\n    //convertCurrencyConversions();\r\n    async.map(transactions, getTransactionDetails, function(error, results) {\r\n        if (error) {\r\n            console.log(\"ERROR\")\r\n            callback(error);\r\n        }\r\n        else {\r\n            console.log(\"Save transactions\")\r\n            saveTransactions(results, callback)\r\n        }\r\n    });\r\n}\r\n\r\nfunction sanityChecks(t, callback) {}\r\n\r\nfunction getTransactionDetails(t, callback) {\r\n    sanityChecks(t, callback);\r\n    t.type = \"paypal\";\r\n    if (t.L_TYPE == 'Fee' || t.L_TYPE == 'Fee Reversal') {\r\n        callback(null, t)\r\n    }\r\n    else {\r\n        console.log(\"Calling GetTransactionDetails for transaction \" + t._id)\r\n        paypal.buildQuery(\"GetTransactionDetails\", function(error, response) {\r\n            if (error == null) {\r\n                t.transaction_details = response;\r\n                callback(null, t)\r\n            }\r\n            else if (error.L_ERRORCODE0 == '10004' ) {\r\n                console.log(\"WARNING calling GetTransactionDetails failed for transaction \" + t._id + \" type \" + t.L_TYPE)\r\n                callback(null, t)\r\n            \r\n            } else {\r\n                console.log(\"FAILURE calling GetTransactionDetails failed for transaction \" + t._id + \" type \" + t.L_TYPE)\r\n            \r\n                callback(error);\r\n            }\r\n        }, {\r\n            transactionId: t._id\r\n        });\r\n    }\r\n}\r\n\r\nfunction saveTransactions(results, callback) {\r\n    console.log(\"Saving Transactions to database...\")\r\n    db.save(results, callback);\r\n}\r\n// For an outgoing payment:\r\n//    - there is an outgoing payment in USD ($-9.95)\r\n//    - there is a Currency Conversion (credit) in USD ($+9.95)\r\n//        - the above two balance each other out\r\n//    - there is finally a Currency Conversion (debit) in GBP (£-4.99)\r\n//    - the timestamps for all three of the above appear to be identical\r\n//\r\n// For a refunded payment\r\n//    - there is an incoming payment in USD ($+9.95)\r\n//    - there is a Currency conversion (debit) in USD ($-9.95)\r\n//        - the above two balance each other out\r\n//    - there is finally a Currency Conversion (credit) in GBP (£+4.99)\r\n//    - the timestamps for all three of the above appear to be identical\r\n//    \r\n\r\nfunction convertCurrencyConversions() {\r\n    for (var time in currency_conversions) {\r\n        var transactions = currency_conversions[time];\r\n        \r\n        // If the transaction is a Payment and if its amount is less than zero\r\n        if (transactions[\"Payment\"] && transactions[\"Payment\"][1] < 0) {\r\n            if (transactions[\"Currency Conversion (debit)\"]) {\r\n                var transaction = transactions[\"Payment\"][3];\r\n                transaction.L_CURRENCYCODE = transactions[\"Currency Conversion (debit)\"][0];\r\n                transaction.L_AMT = transactions[\"Currency Conversion (debit)\"][1];\r\n            }\r\n        }\r\n        else if (transactions[\"Payment\"] && transactions[\"Payment\"][1] > 0) {\r\n            if (transactions[\"Currency Conversion (credit)\"]) {\r\n                var transaction = transactions[\"Payment\"][3];\r\n\r\n                transaction.L_CURRENCYCODE = transactions[\"Currency Conversion (credit)\"][0];\r\n                transaction.L_AMT = transactions[\"Currency Conversion (credit)\"][1];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// We collect transactionsForTime relating to currency conversions and story them in \r\n// the currency_conversions object, keyed by the transaction's TIMESTAMP attribute\r\n\r\nfunction gatherCurrencyConversions(t) {\r\n    // If the currency code is not GBP and the TYPE is not Currency Conversion\r\n    // then we have a payment made in a foreign currency, e.g. a payment in USD\r\n    // and we store this keyed by TIMESTAMP and \"Payment\"\r\n    var currencyCode = t.L_CURRENCYCODE,\r\n        type = t.L_TYPE,\r\n        time = t.L_TIMESTAMP,\r\n        amount = t.L_AMT;\r\n    if (currencyCode != 'GBP' && !type.match(/Currency Conversion/)) {\r\n        currency_conversions[time] = currency_conversions[time] || {};\r\n        currency_conversions[time][\"Payment\"] = [t.currencyCode, amount, type, t];\r\n    }\r\n\r\n    // Otherwise we have a currency conversion, which we key by its type, e.g.\r\n    // \"Currency Conversion (credit) or Currency Conversion (debit)\r\n    else if (type.match(/Currency Conversion/)) {\r\n        currency_conversions[time] = currency_conversions[time] || {};\r\n        currency_conversions[time][type] = [currencyCode, amount, t];\r\n    }\r\n}\r\n\r\nfunction filter(t) {\r\n    if (t.L_NAME == 'Royal Mail Group Online Postage') {\r\n        t.MYOB_ACCOUNT = '52010'\r\n    }\r\n    else if (t.L_TYPE == 'Fee') {\r\n        t.MYOB_ACCOUNT = '65000'\r\n    }\r\n    else if (t.L_TYPE == 'Transfer') {\r\n        t.MYOB_ACCOUNT = '12101'\r\n    }\r\n    else if (t.L_TYPE == 'Payment' && t.L_AMT > 0) {\r\n        t.MYOB_ACCOUNT = '41110'\r\n    }\r\n    else if (t.L_TYPE == 'Fee Reversal') {\r\n        t.MYOB_ACCOUNT = '65000'\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":6514}]],"length":6514}
